'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var old = require('old');

var EventWrapper = function (_EventEmitter) {
  _inherits(EventWrapper, _EventEmitter);

  function EventWrapper(emitter) {
    _classCallCheck(this, EventWrapper);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(EventWrapper).call(this));

    if (emitter == null) {
      throw new Error('Must provide an EventEmitter to wrap');
    }
    _this.emitter = emitter;
    _this.events = {};
    _this.on('removeListener', _this._onRemoveListener.bind(_this));
    _this.on('newListener', _this._onNewListener.bind(_this));
    return _this;
  }

  _createClass(EventWrapper, [{
    key: '_onNewListener',
    value: function _onNewListener(event) {
      var _this2 = this;

      if (this.events[event]) return;
      var listener = function listener() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _this2.emit.apply(_this2, [event].concat(args));
      };
      this.events[event] = listener;
      this.emitter.on(event, listener);
    }
  }, {
    key: '_onRemoveListener',
    value: function _onRemoveListener(event) {
      if (this.events[event] && this.listenerCount(event) === 0) {
        this._cleanupEvent(event);
      }
    }
  }, {
    key: '_cleanupEvent',
    value: function _cleanupEvent(event) {
      this.emitter.removeListener(event, this.events[event]);
      delete this.events[event];
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      for (var event in this.events) {
        this._cleanupEvent(event);
        this.removeAllListeners(event);
      }
    }
  }]);

  return EventWrapper;
}(EventEmitter);

module.exports = old(EventWrapper);