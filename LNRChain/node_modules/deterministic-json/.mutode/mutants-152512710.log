MUTANT 1:	MM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 4 - 2'`
MUTANT 2:	MM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) / 4 + 2'`
MUTANT 3:	MM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length * 3) * 4 + 2'`
MUTANT 4:	NCM index.js Line 37:	`typeof value === 'object' &&` > `typeof value !== 'object' &&'`
MUTANT 5:	NCM index.js Line 38:	`value != null &&` > `value == null &&'`
MUTANT 6:	NCM index.js Line 39:	`value.type === 'Buffer' &&` > `value.type !== 'Buffer' &&'`
MUTANT 7:	NCM index.js Line 49:	`if (typeof value !== 'string') return value` > `if (typeof value === 'string') return value'`
MUTANT 8:	NCM index.js Line 57:	`if (typeof obj[key] === 'object' && !Buffer.isBuffer(obj[key])) {` > `if (typeof obj[key] !== 'object' && !Buffer.isBuffer(obj[key])) {'`
MUTANT 9:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 0) * 4 + 2'`
MUTANT 10:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 2) * 4 + 2'`
MUTANT 11:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 4) * 4 + 2'`
MUTANT 12:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 537714) * 4 + 2'`
MUTANT 13:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 0 + 2'`
MUTANT 14:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 3 + 2'`
MUTANT 15:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 5 + 2'`
MUTANT 16:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 208683 + 2'`
MUTANT 17:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 4 + 0'`
MUTANT 18:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 4 + 1'`
MUTANT 19:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 4 + 3'`
MUTANT 20:	NLM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor(buffer.length / 3) * 4 + 933141'`
MUTANT 21:	NLM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('base64').slice(-1, actualLength)'`
MUTANT 22:	NLM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('base64').slice(1, actualLength)'`
MUTANT 23:	NLM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('base64').slice(450611, actualLength)'`
MUTANT 24:	RCM index.js Line 37:	`typeof value === 'object' &&` > `true &&'`
MUTANT 25:	RCM index.js Line 37:	`typeof value === 'object' &&` > `false &&'`
MUTANT 26:	RCM index.js Line 38:	`value != null &&` > `true &&'`
MUTANT 27:	RCM index.js Line 38:	`value != null &&` > `false &&'`
MUTANT 28:	RCM index.js Line 39:	`value.type === 'Buffer' &&` > `true &&'`
MUTANT 29:	RCM index.js Line 39:	`value.type === 'Buffer' &&` > `false &&'`
MUTANT 30:	RCM index.js Line 49:	`if (typeof value !== 'string') return value` > `if (true) return value'`
MUTANT 31:	RCM index.js Line 49:	`if (typeof value !== 'string') return value` > `if (false) return value'`
MUTANT 32:	RCM index.js Line 57:	`if (typeof obj[key] === 'object' && !Buffer.isBuffer(obj[key])) {` > `if (true && !Buffer.isBuffer(obj[key])) {'`
MUTANT 33:	RCM index.js Line 57:	`if (typeof obj[key] === 'object' && !Buffer.isBuffer(obj[key])) {` > `if (false && !Buffer.isBuffer(obj[key])) {'`
MUTANT 34:	RFCAM index.js Line 1:	`let stableStringify = require('json-stable-stringify')` > `let stableStringify = require()'`
MUTANT 35:	RFCAM index.js Line 8:	`return stableStringify(obj, { replacer: bufferToBase64Replacer })` > `return stableStringify({ replacer: bufferToBase64Replacer })'`
MUTANT 36:	RFCAM index.js Line 8:	`return stableStringify(obj, { replacer: bufferToBase64Replacer })` > `return stableStringify(obj)'`
MUTANT 37:	RFCAM index.js Line 13:	`let obj = JSON.parse(json)` > `let obj = JSON.parse()'`
MUTANT 38:	RFCAM index.js Line 14:	`return convertBase64ToBuffers(obj)` > `return convertBase64ToBuffers()'`
MUTANT 39:	RFCAM index.js Line 19:	`return replace(obj, bufferToBase64Replacer)` > `return replace(bufferToBase64Replacer)'`
MUTANT 40:	RFCAM index.js Line 19:	`return replace(obj, bufferToBase64Replacer)` > `return replace(obj)'`
MUTANT 41:	RFCAM index.js Line 24:	`return replace(obj, base64ToBufferReplacer)` > `return replace(base64ToBufferReplacer)'`
MUTANT 42:	RFCAM index.js Line 24:	`return replace(obj, base64ToBufferReplacer)` > `return replace(obj)'`
MUTANT 43:	RFCAM index.js Line 29:	`let actualLength = Math.floor(buffer.length / 3) * 4 + 2` > `let actualLength = Math.floor() * 4 + 2'`
MUTANT 44:	RFCAM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('base64').slice(actualLength)'`
MUTANT 45:	RFCAM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('base64').slice(0)'`
MUTANT 46:	RFCAM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString().slice(0, actualLength)'`
MUTANT 47:	RFCAM index.js Line 40:	`Array.isArray(value.data)` > `Array.isArray()'`
MUTANT 48:	RFCAM index.js Line 42:	`value = Buffer.from(value)` > `value = Buffer.from()'`
MUTANT 49:	RFCAM index.js Line 44:	`if (!Buffer.isBuffer(value)) return value` > `if (!Buffer.isBuffer()) return value'`
MUTANT 50:	RFCAM index.js Line 45:	`return `${base64Prefix}${bufferToBase64(value)}`` > `return `${base64Prefix}${bufferToBase64()}`'`
MUTANT 51:	RFCAM index.js Line 50:	`if (!value.startsWith(base64Prefix)) return value` > `if (!value.startsWith()) return value'`
MUTANT 52:	RFCAM index.js Line 51:	`return Buffer.from(value.slice(base64Prefix.length), 'base64')` > `return Buffer.from('base64')'`
MUTANT 53:	RFCAM index.js Line 51:	`return Buffer.from(value.slice(base64Prefix.length), 'base64')` > `return Buffer.from(value.slice(base64Prefix.length))'`
MUTANT 54:	RFCAM index.js Line 51:	`return Buffer.from(value.slice(base64Prefix.length), 'base64')` > `return Buffer.from(value.slice(), 'base64')'`
MUTANT 55:	RFCAM index.js Line 56:	`obj[key] = replacer(key, obj[key])` > `obj[key] = replacer(obj[key])'`
MUTANT 56:	RFCAM index.js Line 56:	`obj[key] = replacer(key, obj[key])` > `obj[key] = replacer(key)'`
MUTANT 57:	RFCAM index.js Line 57:	`if (typeof obj[key] === 'object' && !Buffer.isBuffer(obj[key])) {` > `if (typeof obj[key] === 'object' && !Buffer.isBuffer()) {'`
MUTANT 58:	RFCAM index.js Line 59:	`replace(obj[key], replacer)` > `replace(replacer)'`
MUTANT 59:	RFCAM index.js Line 59:	`replace(obj[key], replacer)` > `replace(obj[key])'`
MUTANT 60:	RFDPM index.js Line 7:	`function stringify (obj) {` > `function stringify () {'`
MUTANT 61:	RFDPM index.js Line 12:	`function parse (json) {` > `function parse () {'`
MUTANT 62:	RFDPM index.js Line 18:	`function convertBuffersToBase64 (obj) {` > `function convertBuffersToBase64 () {'`
MUTANT 63:	RFDPM index.js Line 23:	`function convertBase64ToBuffers (obj) {` > `function convertBase64ToBuffers () {'`
MUTANT 64:	RFDPM index.js Line 28:	`function bufferToBase64 (buffer) {` > `function bufferToBase64 () {'`
MUTANT 65:	RFDPM index.js Line 33:	`function bufferToBase64Replacer (key, value) {` > `function bufferToBase64Replacer (value) {'`
MUTANT 66:	RFDPM index.js Line 33:	`function bufferToBase64Replacer (key, value) {` > `function bufferToBase64Replacer (key) {'`
MUTANT 67:	RFDPM index.js Line 48:	`function base64ToBufferReplacer (key, value) {` > `function base64ToBufferReplacer (value) {'`
MUTANT 68:	RFDPM index.js Line 48:	`function base64ToBufferReplacer (key, value) {` > `function base64ToBufferReplacer (key) {'`
MUTANT 69:	RFDPM index.js Line 54:	`function replace (obj, replacer) {` > `function replace (replacer) {'`
MUTANT 70:	RFDPM index.js Line 54:	`function replace (obj, replacer) {` > `function replace (obj) {'`
MUTANT 71:	RFM Lines 7-9: Commented function stringify
MUTANT 72:	RFM Lines 12-15: Commented function parse
MUTANT 73:	RFM Lines 18-20: Commented function convertBuffersToBase64
MUTANT 74:	RFM Lines 23-25: Commented function convertBase64ToBuffers
MUTANT 75:	RFM Lines 28-31: Commented function bufferToBase64
MUTANT 76:	RFM Lines 33-46: Commented function bufferToBase64Replacer
MUTANT 77:	RFM Lines 48-52: Commented function base64ToBufferReplacer
MUTANT 78:	RFM Lines 54-63: Commented function replace
MUTANT 79:	RLM Commented line 1:	let stableStringify = require('json-stable-stringify')
MUTANT 80:	RLM Commented line 3:	const base64Prefix = ':base64:'
MUTANT 81:	RLM Commented line 8:	return stableStringify(obj, { replacer: bufferToBase64Replacer })
MUTANT 82:	RLM Commented line 13:	let obj = JSON.parse(json)
MUTANT 83:	RLM Commented line 14:	return convertBase64ToBuffers(obj)
MUTANT 84:	RLM Commented line 19:	return replace(obj, bufferToBase64Replacer)
MUTANT 85:	RLM Commented line 24:	return replace(obj, base64ToBufferReplacer)
MUTANT 86:	RLM Commented line 29:	let actualLength = Math.floor(buffer.length / 3) * 4 + 2
MUTANT 87:	RLM Commented line 30:	return buffer.toString('base64').slice(0, actualLength)
MUTANT 88:	RLM Commented line 42:	value = Buffer.from(value)
MUTANT 89:	RLM Commented line 44:	if (!Buffer.isBuffer(value)) return value
MUTANT 90:	RLM Commented line 45:	return `${base64Prefix}${bufferToBase64(value)}`
MUTANT 91:	RLM Commented line 49:	if (typeof value !== 'string') return value
MUTANT 92:	RLM Commented line 50:	if (!value.startsWith(base64Prefix)) return value
MUTANT 93:	RLM Commented line 51:	return Buffer.from(value.slice(base64Prefix.length), 'base64')
MUTANT 94:	RLM Commented line 56:	obj[key] = replacer(key, obj[key])
MUTANT 95:	RLM Commented line 59:	replace(obj[key], replacer)
MUTANT 96:	RLM Commented line 62:	return obj
MUTANT 97:	ROPM index.js Line 8:	`return stableStringify(obj, { replacer: bufferToBase64Replacer })` > `return stableStringify(obj, {  })'`
MUTANT 98:	ROPM index.js Line 66:	`stringify,` > `'`
MUTANT 99:	ROPM index.js Line 67:	`parse,` > `'`
MUTANT 100:	ROPM index.js Line 68:	`convertBuffersToBase64,` > `'`
MUTANT 101:	ROPM index.js Line 69:	`convertBase64ToBuffers` > `'`
MUTANT 102:	SLM index.js Line 1:	`let stableStringify = require('json-stable-stringify')` > `let stableStringify = require('')'`
MUTANT 103:	SLM index.js Line 1:	`let stableStringify = require('json-stable-stringify')` > `let stableStringify = require('717mfJKPW4LUcO4dO5DDe')'`
MUTANT 104:	SLM index.js Line 3:	`const base64Prefix = ':base64:'` > `const base64Prefix = '''`
MUTANT 105:	SLM index.js Line 3:	`const base64Prefix = ':base64:'` > `const base64Prefix = '4RSwC7a1''`
MUTANT 106:	SLM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('').slice(0, actualLength)'`
MUTANT 107:	SLM index.js Line 30:	`return buffer.toString('base64').slice(0, actualLength)` > `return buffer.toString('8TeAbQ').slice(0, actualLength)'`
MUTANT 108:	SLM index.js Line 37:	`typeof value === 'object' &&` > `typeof value === '' &&'`
MUTANT 109:	SLM index.js Line 37:	`typeof value === 'object' &&` > `typeof value === 'WOdUTx' &&'`
MUTANT 110:	SLM index.js Line 39:	`value.type === 'Buffer' &&` > `value.type === '' &&'`
MUTANT 111:	SLM index.js Line 39:	`value.type === 'Buffer' &&` > `value.type === 'zFigX6' &&'`
MUTANT 112:	SLM index.js Line 49:	`if (typeof value !== 'string') return value` > `if (typeof value !== '') return value'`
MUTANT 113:	SLM index.js Line 49:	`if (typeof value !== 'string') return value` > `if (typeof value !== 'EDKk3p') return value'`
MUTANT 114:	SLM index.js Line 51:	`return Buffer.from(value.slice(base64Prefix.length), 'base64')` > `return Buffer.from(value.slice(base64Prefix.length), '')'`
MUTANT 115:	SLM index.js Line 51:	`return Buffer.from(value.slice(base64Prefix.length), 'base64')` > `return Buffer.from(value.slice(base64Prefix.length), 'ivtbmC')'`
MUTANT 116:	SLM index.js Line 57:	`if (typeof obj[key] === 'object' && !Buffer.isBuffer(obj[key])) {` > `if (typeof obj[key] === '' && !Buffer.isBuffer(obj[key])) {'`
MUTANT 117:	SLM index.js Line 57:	`if (typeof obj[key] === 'object' && !Buffer.isBuffer(obj[key])) {` > `if (typeof obj[key] === 'TiHkdF' && !Buffer.isBuffer(obj[key])) {'`
