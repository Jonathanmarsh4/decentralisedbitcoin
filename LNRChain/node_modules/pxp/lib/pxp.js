'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EventEmitter = require('events');
var json = require('ndjson');
var pumpify = require('pumpify').obj;
var old = require('old');
var debug = require('debug')('pxp');

var PXP_MESSAGES = ['hello', 'getpeers', 'relay', 'incoming', 'upgrade', 'connect', 'res'];

var PXP = function (_EventEmitter) {
  _inherits(PXP, _EventEmitter);

  function PXP(stream) {
    _classCallCheck(this, PXP);

    var _this = _possibleConstructorReturn(this, (PXP.__proto__ || Object.getPrototypeOf(PXP)).call(this));
    // TODO: rate limiting


    _this.nonce = 0;
    _this.stream = pumpify(json.serialize(), stream, json.parse());
    _this.stream.on('data', _this._onMessage.bind(_this));
    _this.stream.on('error', _this.error.bind(_this));
    return _this;
  }

  _createClass(PXP, [{
    key: 'error',
    value: function error(err) {
      debug('error: ' + err.message);
      this.emit('error', err);
    }
  }, {
    key: '_onMessage',
    value: function _onMessage(message) {
      var _this2 = this;

      if (!Array.isArray(message) || message.length !== 3) {
        var err = new Error('Peer sent invalid PXP message');
        return this.error(err);
      }

      var _message = _slicedToArray(message, 3);

      var command = _message[0];
      var nonce = _message[1];
      var args = _message[2];

      if (PXP_MESSAGES.indexOf(command) === -1) {
        var _err = new Error('Peer sent unknown PXP message: "' + command + '"');
        return this.error(_err);
      }
      debug('<< cmd=' + command + ', n=' + nonce + ', args=' + JSON.stringify(args));
      if (command === 'res') {
        return this.emit(nonce, args);
      }
      var res = function res() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (args.length === 1) args = args[0];
        _this2.stream.write(['res', nonce, args]);
        debug('>> cmd=res, n=' + nonce + ', args=' + JSON.stringify(args));
      };
      this.emit(command, args, res);
    }
  }, {
    key: 'send',
    value: function send(command) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      if (typeof args[args.length - 1] === 'function') {
        var cb = args[args.length - 1];
        args = args.slice(0, args.length - 1);
      }
      if (args.length === 1) args = args[0];
      var nonce = (this.nonce++).toString(36);
      debug('>> cmd=' + command + ', n=' + nonce + ', args=' + JSON.stringify(args));
      if (cb) this.once(nonce, cb);
      this.stream.write([command, nonce, args]);
    }
  }]);

  return PXP;
}(EventEmitter);

module.exports = old(PXP);