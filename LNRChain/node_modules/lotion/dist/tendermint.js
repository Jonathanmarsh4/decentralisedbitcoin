"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var tendermint = require("tendermint-node");
var fs = require("fs-extra");
var path_1 = require("path");
function genValidator() {
    return tendermint.genValidator();
}
exports.genValidator = genValidator;
function createTendermintProcess(_a) {
    var ports = _a.ports, home = _a.home, logTendermint = _a.logTendermint, genesisPath = _a.genesisPath, keyPath = _a.keyPath, peers = _a.peers;
    return __awaiter(this, void 0, void 0, function () {
        var opts, shouldUseAuth_1, cfgPath, configToml, bogusId_1, privValPath, newValidatorJson, oldValidatorJson, closing, tendermintProcess;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    opts = {
                        rpc: { laddr: 'tcp://0.0.0.0:' + ports.rpc },
                        p2p: { laddr: 'tcp://0.0.0.0:' + ports.p2p },
                        proxyApp: 'tcp://127.0.0.1:' + ports.abci
                    };
                    /**
                     * initialize tendermint's home directory
                     * inside <lotion_home>/networks/<id>
                     */
                    return [4 /*yield*/, tendermint.init(home)
                        /**
                         * disable authenticated encryption for p2p if
                         * no peer strings containing ids are provided.
                         */
                    ];
                case 1:
                    /**
                     * initialize tendermint's home directory
                     * inside <lotion_home>/networks/<id>
                     */
                    _b.sent();
                    /**
                     * disable authenticated encryption for p2p if
                     * no peer strings containing ids are provided.
                     */
                    if (peers && peers.length > 0) {
                        shouldUseAuth_1 = false;
                        peers.forEach(function (peer) {
                            if (peer.indexOf('@') !== -1) {
                                shouldUseAuth_1 = true;
                            }
                        });
                        if (!shouldUseAuth_1) {
                            cfgPath = path_1.join(home, 'config', 'config.toml');
                            configToml = fs.readFileSync(cfgPath, 'utf8');
                            configToml = configToml.replace('auth_enc = true', 'auth_enc = false');
                            fs.writeFileSync(cfgPath, configToml);
                            bogusId_1 = '0000000000000000000000000000000000000000';
                            peers.forEach(function (peer, index) {
                                if (peer.indexOf('@') === -1) {
                                    peers[index] = [bogusId_1, peer].join('@');
                                }
                            });
                        }
                        opts.p2p.persistentPeers = peers.join(',');
                    }
                    /**
                     * overwrite the generated genesis.json with
                     * the correct one if specified by the developer.
                     */
                    if (genesisPath) {
                        if (!fs.existsSync(genesisPath)) {
                            throw new Error("no genesis file found at " + genesisPath);
                        }
                        fs.copySync(genesisPath, path_1.join(home, 'config', 'genesis.json'));
                    }
                    /**
                     * overwrite the priv_validator_key.json file with the one specified.
                     *
                     * the file is only copied if the pub_key in the specified file
                     * doesn't match the one in the tendermint home directory.
                     *
                     */
                    if (keyPath) {
                        privValPath = path_1.join(home, 'config', 'priv_validator_key.json');
                        if (!fs.existsSync(keyPath)) {
                            throw new Error("no keys file found at " + keyPath);
                        }
                        newValidatorJson = fs.readJsonSync(keyPath);
                        oldValidatorJson = fs.readJsonSync(privValPath);
                        if (newValidatorJson.pub_key.value !== oldValidatorJson.pub_key.value) {
                            fs.copySync(keyPath, privValPath);
                        }
                    }
                    closing = false;
                    tendermintProcess = tendermint.node(home, opts);
                    if (logTendermint) {
                        tendermintProcess.stdout.pipe(process.stdout);
                        tendermintProcess.stderr.pipe(process.stderr);
                    }
                    tendermintProcess.then(function () {
                        if (closing)
                            return;
                        throw new Error('Tendermint exited unexpectedly');
                    });
                    return [4 /*yield*/, tendermintProcess.synced()];
                case 2:
                    _b.sent();
                    return [2 /*return*/, {
                            close: function () {
                                closing = true;
                                tendermintProcess.kill();
                            }
                        }];
            }
        });
    });
}
exports.default = createTendermintProcess;
